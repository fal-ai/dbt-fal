# NOTE: changes to this may need to be applied to other cliff.toml files in the repo
# configuration file for git-cliff (0.1.0)

[changelog]
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [new changes]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/fal-ai/fal/pull/${2}))"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "Features"},
    { message = "^feat(fal-dbt)", group = "Features"},
    { message = "^feat(adapter)", group = "Features"},
    { message = "^fix", group = "Bug Fixes"},
    { message = "^fix(fal-dbt)", group = "Bug Fixes"},
    { message = "^fix(adapter)", group = "Bug Fixes"},
    { message = "^doc", group = "Documentation"},
    { message = "^doc(fal-dbt)", group = "Documentation"},
    { message = "^doc(adapter)", group = "Documentation"},
    { message = "^perf", group = "Performance"},
    { message = "^perf(fal-dbt)", group = "Performance"},
    { message = "^perf(adapter)", group = "Performance"},
    { message = "^refactor", group = "Refactor"},
    { message = "^refactor(fal-dbt)", group = "Refactor"},
    { message = "^refactor(adapter)", group = "Refactor"},
    { message = "^style", group = "Styling"},
    { message = "^style(fal-dbt)", group = "Styling"},
    { message = "^style(adapter)", group = "Styling"},
    { message = "^test", group = "Testing"},
    { message = "^test(fal-dbt)", group = "Testing"},
    { message = "^test(adapter)", group = "Testing"},
    { message = "^chore", group = "Miscellaneous Tasks"},
    { message = "^chore(fal-dbt)", group = "Miscellaneous Tasks"},
    { message = "^chore(adapter)", group = "Miscellaneous Tasks"},
    { body = ".*security", group = "Security"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = true

# TODO: tag configs regexes?
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
